/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
// const express = require("express");
// const bodyParser = require("body-parser");
// const { readFileSync, readFile, writeFile, writeFileSync } = require("fs");

// const app = express();

// app.use(bodyParser.json());
// app.use(express.urlencoded({ extended: true }));

const express = require("express");
const bodyParser = require("body-parser");
const { writeFile, writeFileSync, readFile, readFileSync } = require("fs");

const app = express();

app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));

app.get("/todos", (req, res) => {
  readFileSync("todos.json", "utf-8", (err, data) => {
    if (err) throw err;
    res.json(JSON.parse(data));
  });
});

//get user notes by id
app.get("/todos/:id", (req, res) => {
  const id1 = parseInt(req.params.id);

  const data = readFile("todos.json", "utf-8", (err) => {
    if (err) throw err;
  });
  const parseData = JSON.parse(data);
  const todo = parseData.find((t) => t.id === id1);
  if (!todo) {
    res.status(404).send("not found");
  } else {
    res.json(todo);
  }
});

app.post("/todos", (req, res) => {
  const newtodo = {
    id: Math.floor(Math.random() * 10000),
    title: req.body.title,
    desc: req.body.desc,
  };
  // console.log(newtodo);
  readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const parseData = JSON.parse(data);
    parseData.push({
      newtodo,
    });
    writeFile("todos.json", JSON.stringify(parseData), (err) => {
      if (err) throw err;
      res.status(201).json(newtodo);
    });
  });
});

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);

  readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const parsedData = JSON.parse(data);
    console.log(parsedData);
    let item = parsedData.findIndex((x) => x.id == id);
    console.log(item);
    if (!item) {
      res.status(404).send("not found");
    } else {
      const updatedTodo = {
        title: req.body.title,
        desc: req.body.desc,
      };
      parsedData[item] = updatedTodo;
      console.log(item);
      writeFile("todos.json", JSON.stringify(parsedData), (err) => {
        if (err) throw err;
        res.status(200).json(updatedTodo);
      });
    }
  });
});

app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);

  readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const parseData = JSON.parse(data);
    const item = parseData.findIndex((x) => x.id === id);
    if (!item) {
      res.status(404).status("not found");
    }
    //remove item
    parseData.splice(item, 1);
    writeFile("todos.json", JSON.stringify(parseData), (err) => {
      if (err) throw err;
      res.status(200).send();
    });
  });
});

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});

module.exports = app;
